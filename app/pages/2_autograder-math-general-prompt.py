# this script is aim to use vision model for all the math questions
# and construct the set of two prompts to be used in the autograder and response analysis + feedback 

from pydantic import BaseModel, HttpUrl
from typing import Dict, Literal, Optional, List, Union


import streamlit as st
from openai import OpenAI
from math import floor
import xml.etree.ElementTree as ET
import html
import re

client = OpenAI()

MODEL_NAME = "gpt-4-vision-preview"
FULL_SCORE_FEEDBACK = "Great job!"


class Solution(BaseModel):
    text: str
    image_url: Optional[HttpUrl]

class SkillsTested(BaseModel):
    category: Optional[str] = None
    sub_category: Optional[str] = None
    description: Optional[str] 

class Question(BaseModel):
    url: HttpUrl
    other_notes: str
    statement: str
    point: int = 4
    question_type: str
    # If assignment_type should accept only 'activity' or 'assessment'
    assignment_type: Literal['activity', 'assessment']
    image_url_in_statement: Optional[str] = None # Optional[HttpUrl] = None
    image_in_statement_alt: Optional[str] = None
    solution: Optional[Dict[str, bool] | Dict[str, str] | str] = None
    answer: Optional[Dict[str, bool] |  Dict[str, str] | str] = None
    teacher_notes: Optional[str] = None
    skills_tested: List[SkillsTested] = None
    # You do not need to explicitly declare skills_tested_str here if it's generated by a validator

    @property
    def skills_tested_str(self) -> Optional[str]:
        """Returns a newline-separated string of the skills_tested object's values."""
        if self.skills_tested:
            skills_tested_str = "\n".join([f"{skill.category}\n{skill.sub_category}\n{skill.description}" for skill in self.skills_tested])
            return skills_tested_str
        return None
    


@st.cache_data()
def analyze_student_response(problem_statement:str,solution:dict, answer:str, image_url:str, teacher_notes:str, skills_tested:str):
    # tags may need to be removed due to the tagging usage in content
    if isinstance(solution, dict):
        solution =  {strip_p_tags(mathml_to_readable(k)):v for k,v in solution.items()}
    if isinstance(answer, dict):
        answer =  {strip_p_tags(mathml_to_readable(k)):v for k,v in answer.items()}
    

    if image_url:
        response = client.chat.completions.create(
            model=MODEL_NAME,
            temperature=0,
            messages=[
                {
                "role": "user",
                "content": [
                    {"type": "text", "text": f"""
                    <context>: analyze the student's response to a middle school math problem.
                    you are provided with problem statement, solution, student's answer, optional teacher's note,
                    as well as the skills being assessed for the question when available. 

                    please analyze the student's response. 
                    <objective>understand student's thought process and weaknesses based on their answer.
                    <problem statement>{problem_statement} </problem statement>
                    <solution>{solution} </solution>
                    <answer>{answer} </answer>
                    <teacher notes>{teacher_notes} </teacher notes>
                    <skills assessed>{skills_tested} </skills assessed>
                    
                    Provide detailed analysis to analyze where the student got it wrong, and what they should have done differently.
                    """},
                    {
                    "type": "image_url",
                    "image_url": {
                        "url": image_url,
                    },
                    },
                ],
                }
            ],
            max_tokens=1000, # careful with this 
            )
    else:
        response = client.chat.completions.create(
                model=MODEL_NAME,
                temperature=0,
                messages=[
                    {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": f"""
                        <context>: analyze the student's response to a middle school math problem.
                        you are provided with problem statement, solution, student's answer, optional teacher's note,
                        as well as the skills being assessed for the question when available. 

                        please analyze the student's response. 
                        <objective>understand student's thought process and weaknesses based on their answer.
                        <problem statement>{problem_statement} </problem statement>
                        <solution>{solution} </solution>
                        <answer>{answer} </answer>
                        <teacher notes>{teacher_notes} </teacher notes>
                        <skills assessed>{skills_tested} </skills assessed>
                        
                        Provide detailed analysis to analyze where the student got it wrong, and what they should have done differently.
                        """}
                    ],
                    }
                ],
                max_tokens=1000, # careful with this 
                )
    return response.choices[0].message.content



@st.cache_data()
def summarize_analysis(analysis:str, solution:str, skills_tested:str, teacher_notes:str=None):
    response = client.chat.completions.create(
        model=MODEL_NAME,
        temperature=0,
        messages=[
            {"role": "system", 
             "content": '''you provide feedback to a student on middle school math problems. 
             based on a detailed analysis for the student\'s response, provide short and specific feedback.
             the feedback shall be in either an imperative sentence or an advancing question, and follow these guidelines:
             - focus on what's the weakness in the student's response based on the analysis.
             - consider <teacher_notes> when provided; when missing, focus on the areas where the student needs improvement.
             - consider the skills being assessed for the question when available; when missing, provide feedback based on the analysis of the student's response.
             - avoid qualifiers, encouragements, motivational text, etc. but remain age-appropriate for a fifth grader.
             - never reveal solution directly.
             - never point to a specific option of the question if the question is multiple select or multiple choice.
             - either point to the problem or ask guiding question.'''},
            {"role": "user",
            "content": f'''Given the following
            - detailed analysis on the student's response to the question <analysis>{analysis}</analysis>. 
            - <teacher_notes>{teacher_notes}</teacher_notes> when provided; when missing, focus on the areas where the student needs improvement.
            - here are the skill(s) being assessed: <skill_tested>{skills_tested}</skills_tested>; feedback needs to reflect the skills being assessed; when missing, provide feedback based on the analysis of the student's response.
            - never reveal solution <solution>{solution}</solution>

            provide a specific and short feedback to the student based on the analysis in either an imperative sentence or an advancing question 
            ''',
            }],
        max_tokens=100, # careful with this
        )
    return response.choices[0].message.content

def strip_p_tags(text:str) -> str:
    """
    This function strips out <p> </p> tags from the given text.

    Args:
        text (str): The text containing <p> </p> tags.

    Returns:
        str: The text with <p> </p> tags removed.
    """
    return text.replace('<p>', '').replace('</p>', '')

def mathml_to_readable(expr):
    def parse_mathml(mathml_content):
        try:
            root = ET.fromstring(mathml_content)
        except ET.ParseError as e:
            return f"Error parsing MathML: {e}"

        def parse_element(element):
            if element.tag.endswith('mn'):
                return element.text
            elif element.tag.endswith('msup'):
                base = parse_element(element[0])
                exp = parse_element(element[1])
                return f"{base}^{exp}"
            elif element.tag.endswith('mo'):
                operator = html.unescape(element.text)
                if operator == 'Â·':
                    return ' * '
                elif operator == ':':
                    return ' to '
                else:
                    return operator
            else:
                return ''.join(parse_element(child) for child in element)

        return parse_element(root)

    def extract_and_replace_mathml(text):
        mathml_pattern = r'(<math.*?</math>)'
        while True:
            match = re.search(mathml_pattern, text)
            if not match:
                break
            mathml_expr = match.group(1)
            readable_expr = parse_mathml(mathml_expr)
            text = text.replace(mathml_expr, readable_expr, 1)
        return text

    return extract_and_replace_mathml(expr)


def calculate_multiple_choice_score(solution:dict, answer:dict, points:int=4) -> int:
    """
    This function calculates the score for multiple choice questions.
    It assigns the total points for the question if the student's answer matches the solution,
    and 0 points otherwise.
    
    Args:
        solution (dict): The correct answer for the question.
        answer (dict): The student's answer for the question.
        total_points (int): The total points for the question.
    
    Returns:
        int: The calculated score for the question.
    """
    if solution == answer:
        return points
    else:
        return 0
def calculate_multiple_select_score(solution:dict, answer:dict, points:int=4) -> int:
    """
    This function calculates the score for multiple select questions.
    It counts the number of correct options selected and incorrect options not selected,
    divides the total by the total number of options, multiplies by the total points of the question,
    and rounds down to the nearest integer.
    
    Args:
        solution (dict): The correct answers for the question.
        answer (dict): The student's answers for the question.
        total_points (int): The total points for the question.
    
    Returns:
        int: The calculated score for the question.
    """
    # Count correctly selected and correctly not selected options
    correct_selections = sum(answer[key] == solution[key] and solution[key] is True for key in solution)
    correct_deselections = sum(answer[key] == solution[key] and solution[key] is False for key in solution)

    # Calculate the total score
    total_options = len(solution)
    score = floor((correct_selections + correct_deselections) / total_options * points)
    
    return score

@st.cache_data()
def grade_short_answer(problem_statement:str , teacher_notes:str, solution:str, answer:str, points:int=4) -> int:
    """
    dont worry about it, in kiddom, we use the current autograding system
    """
    response = client.chat.completions.create(
    model="gpt-4-vision-preview",
    temperature=0,
    messages=[
        {"role": "system", "content": f"""
        You are a grader for a middle school math question.
        Score it between 0 and {points}. 
        Provide partial credit if the student's answer met some of the criteria or step in the teaching note.
        And if the student's answer is missing unit or has a different unit, deduct 1 point.
        if the answer matches with the solution, return {points}.
        """},
        {"role": "user", "content": 
        f'''Provided with the problem statement, solution, student's answer, and optional teacher's note,
        <problem statement>{problem_statement}</problem statement>
        <solution>{solution}</solution>
        <answer>{answer}</answer>
        <teacher note>{teacher_notes}</teacher note>
    
        And if the student's answer is missing unit or has a different unit, deduct 1 point.
        Consider the teacher notes if provided for partial credit.
        Do not provide reasons, just return an integer between 0 and {points}. 
        '''}
    ]
    )
    return int(response.choices[0].message.content)

def fix_dollar_signs(markdown_text):
    # Remove markdown formatting
    plain_text = markdown_text.replace('$', '\$')
    return plain_text

if __name__ == "__main__":
    st.set_page_config(layout="wide")
    st.title("AI-generated Feedback for Middle School Math Questions")
    st.write("""---""")

    question_1_data = {
        'url': 'https://app.kiddom.co/curriculum/668915/node/0ea5255a-6e31-42f7-951b-bac095a4679e:64f36058-5e4a-11ee-ac67-066a39b724af:ab40ef47-574f-11ee-9e8a-06dd2b7bf731',
        'other_notes': '**OUR-G6-U2-EUA Problem 1** Chosen b/c its an assessment question statement contains an image ',
        'statement': '<p>Select <strong>all</strong> the true statements.</p>', 
        'point': 4,
        'question_type': 'multiple_select',
        'assignment_type': 'assessment',
        'image_url_in_statement': 'https://kiddom-media-production.s3.us-east-2.amazonaws.com/OUR/math/68/v2/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBa1kxIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--9738a045918a2d388d4614995fc937d1ff52a122/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBZzZGRzF6WDIxaGRHaGZaR2xuYVhSaGJBPT0iLCJleHAiOm51bGwsInB1ciI6InZhcmlhdGlvbiJ9fQ==--89678ca32ceb3b39b6bd3f12552ca73d54236306/6.2.EA.smilytrianglesquare.png',
        'image_in_statement_alt': "", 
        'solution': {
            'A <p>The ratio of triangles to squares is 2 to 4.</p>': True,
            'B <p>The ratio of squares to smiley faces is&nbsp;<math xmlns="http://www.w3.org/1998/Math/MathML"><mn>6</mn><mo>:</mo><mn>4</mn></math>.&nbsp;</p>': False,
            'C <p>The ratio of smiley faces to triangles is 6 to 4.&nbsp;</p>': False,
            'D <p>There are two squares for every triangle.</p>': True,
            'E <p>There are two triangles for every smiley face.</p>': False,
            'F <p>There are three smiley faces for every triangle.</p>': True
            },
        'answer': {
            'A <p>The ratio of triangles to squares is 2 to 4.</p>': True,
            'B <p>The ratio of squares to smiley faces is&nbsp;<math xmlns="http://www.w3.org/1998/Math/MathML"><mn>6</mn><mo>:</mo><mn>4</mn></math>.&nbsp;</p>': False,
            'C <p>The ratio of smiley faces to triangles is 6 to 4.&nbsp;</p>': False,
            'D <p>There are two squares for every triangle.</p>': False,
            'E <p>There are two triangles for every smiley face.</p>': False,
            'F <p>There are three smiley faces for every triangle.</p>': False
            },
        'teacher_notes': '''
         Students selecting B have the ratio backwards (6:4 vs. 4:6). Students failing to select any of A, D, or F may be confused about ratio language, either reversing the order of comparison or not understanding the general concept. Students selecting C might be mistakenly looking at the ratio of smiley faces to squares. Students selecting E are probably noticing that there are indeed two triangles, without understanding what âtwo triangles for every smiley faceâ means.        ''',
        'skills_tested': [SkillsTested(
            category='Ratios and Proportional Relationships',
            sub_category='Understand Ratio Concepts And Use Ratio Reasoning To Solve Problems.',
            description='Understand the concept of a ratio and use ratio language to describe a ratio relationship between two quantities. For example, "The ratio of wings to beaks in the bird house at the zoo was 2:1, because for every 2 wings there was 1 beak." "For every vote candidate A received, candidate C received nearly three votes."'
        )]
    }
    # teacher notes are now on top of the question? or notes for evaluation?

    # Constructing the object
    question_1 = Question(**question_1_data)
    st.markdown(f"{question_1.other_notes}. ([link to original question]({question_1.url}))", unsafe_allow_html=True)
    st.write(f"{question_1.statement}")
    # st.image(str(question_1.image_url_in_statement), caption="", use_column_width=False)
    st.image(question_1.image_url_in_statement, caption="", use_column_width=False)
    question_1_options_checked = {}
    # clean up and get rid of all the <p> tags & convert mathml to readable format
    for option, correct in question_1.answer.items():
        question_1_options_checked[option] = st.checkbox(strip_p_tags(mathml_to_readable(option)), value=correct, key=option)

    # show teacher notes
    st.write(f"> teacher notes: {question_1.teacher_notes}")  
    with st.expander('answers | score | analysis | feedback'):
        st.write('question 1')
        col1, col2, col3, col4 = st.columns((1,1,2,1))
        with col1:
            st.write('*answer*', question_1_options_checked)
        with col2:
            score = calculate_multiple_select_score(solution=question_1.solution, answer=question_1_options_checked, points=4)
            st.write('*score*', score)
        with col3:
            if score == question_1.point:
                st.write('*analysis*\n', FULL_SCORE_FEEDBACK)
                # st.audio(render_audio(full_score_fd))
            else:
                analysis = analyze_student_response(problem_statement=question_1.statement,
                                                solution=question_1.solution,
                                                answer=question_1_options_checked, 
                                                image_url=question_1.image_url_in_statement,
                                                teacher_notes=question_1.teacher_notes,
                                                skills_tested=question_1.skills_tested_str)
                st.write('*analysis*')
                st.write(analysis)
                st.write('---')
                analysis_red = analyze_student_response(problem_statement=question_1.statement,
                                                solution=question_1.solution,
                                                answer=question_1_options_checked, 
                                                image_url=question_1.image_url_in_statement,
                                                teacher_notes=None,
                                                skills_tested=None)
                st.write('*analysis without teacher notes nor skills tested*')
                st.write(analysis_red)
        with col4:
            if score != 4:
                st.write("feedback\n")
                fd_a = summarize_analysis(analysis, question_1.solution, question_1.skills_tested_str, question_1.teacher_notes)
                st.write(fd_a)
                st.write("---")
                st.write("*feedback without teacher notes nor skills tested*")
                fd_a_red = summarize_analysis(analysis_red, question_1.solution, None, None)
                st.write(fd_a_red)


    st.write("""---""")
    question_3_data = {
        'url': 'https://app.kiddom.co/curriculum/668915/node/0ea5255a-6e31-42f7-951b-bac095a4679e:64f36058-5e4a-11ee-ac67-066a39b724af:ab40ef47-574f-11ee-9e8a-06dd2b7bf731',
        'other_notes': '**OUR-G6-U2-EUA Problem 3** Chosen b/c its an assessment multiple choice question',
        'statement': 'A mixture of purple paint contains 6 teaspoons of red paint and 15 teaspoons of blue paint. To make the same shade of purple paint using 35 teaspoons of blue paint, how much red paint would you need? Use the double number line diagram to help if needed.', 
        'point': 4,
        'question_type': 'multiple_choice',
        'assignment_type': 'assessment',
        # 'image_url_in_statement': 'https://kiddom-media-production.s3.us-east-2.amazonaws.com/OUR/math/68/v2/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBa2MxIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--532567c77722aafb99955227360891b0033269a3/6.2.EA_Image_2_en.svg',
        'image_url_in_statement': 'https://i.ibb.co/jzwKdfP/problem3.png',
        'image_in_statement_alt': "", 
        'solution': {
            'A 12 teaspoons': False,
            'B 14 teaspoons': True,
            'C 18 teaspoons': False,
            'D 26 teaspoons': False
            },
        'answer': {
            'A 12 teaspoons': False,
            'B 14 teaspoons': False,
            'C 18 teaspoons': False,
            'D 26 teaspoons': True
            },
        'teacher_notes': '''
            Students selecting A have doubled the amount of red paint, possibly because the amount of blue paint has approximately doubled. Students selecting C may be thinking that the tick marks on the top number line are spaced 3 units apart, when in fact they must be spaced 2 units apart. Students selecting D are either using a constant difference (instead of a constant ratio) between the blue and red paint, or (equivalently) are using a scale of 1 tick mark = 5 units for both number lines.
        ''',
        'skills_tested': [SkillsTested(
            category='Ratios and Proportional Relationships',
            sub_category='Understand Ratio Concepts And Use Ratio Reasoning To Solve Problems.',
            description='Use ratio and rate reasoning to solve real-world and mathematical problems, e.g., by reasoning about tables of equivalent ratios, tape diagrams, double number line diagrams, or equations.'
        )  ]
    }
    question_3 = Question(**question_3_data)
    st.markdown(f"{question_3.other_notes}. ([link to original question]({question_3.url})) ", unsafe_allow_html=True)
    st.write(f"{question_3.statement}")
    st.image(question_3.image_url_in_statement, caption="", use_column_width=False)
    question_3_options_checked = {}
    for option, correct in question_3.answer.items():
        question_3_options_checked[option] = st.checkbox(strip_p_tags(mathml_to_readable(option)), value=correct, key=option)
    st.write(f"> teacher notes: {question_3.teacher_notes}")

    with st.expander('answers | score | analysis | feedback'):
        st.write('question 3')
        col1, col2, col3, col4 = st.columns((1,1,2,1))
        with col1:
            st.write('*answer*', question_3_options_checked)
        with col2:
            score = calculate_multiple_choice_score(solution=question_3.solution, answer=question_3_options_checked, points=4)
            st.write('*score*', score)
        with col3:
            if score == question_3.point:
                st.write('*analysis*\n', FULL_SCORE_FEEDBACK)
                # st.audio(render_audio(full_score_fd))
            else:
                analysis = analyze_student_response(problem_statement=question_3.statement,
                                                solution=question_3.solution,
                                                answer=question_3_options_checked, 
                                                image_url=question_3.image_url_in_statement,
                                                teacher_notes=question_3.teacher_notes,
                                                skills_tested=question_3.skills_tested_str)
                st.write('*analysis*')
                st.write(analysis)
                st.write('---')
                analysis_red = analyze_student_response(problem_statement=question_3.statement,
                                                solution=question_3.solution,
                                                answer=question_3_options_checked, 
                                                image_url=question_3.image_url_in_statement,
                                                teacher_notes=None,
                                                skills_tested=None)
                st.write('*analysis without teacher notes nor skills tested*')
                st.write(analysis_red)
        with col4:
            if score != 4:
                st.write("feedback\n")
                fd_a = summarize_analysis(analysis, question_3.solution, question_3.skills_tested_str, question_3.teacher_notes)
                st.write(fd_a)
                st.write("---")
                st.write("*feedback without teacher notes nor skills tested*")
                fd_a_red = summarize_analysis(analysis_red, question_3.solution, None, None)
                st.write(fd_a_red)


    st.write("""---""")
    question_4_parta_data = {
        'url': 'https://app.kiddom.co/curriculum/668915/node/0ea5255a-6e31-42f7-951b-bac095a4679e:64f36058-5e4a-11ee-ac67-066a39b724af:ab40ef47-574f-11ee-9e8a-06dd2b7bf731',
        'other_notes': '**OUR-G6-U2-EUA Problem 5 PART A** Chosen b/c its an assessment short answer question',
        'statement': 'Solve each of the following: 3 movie tickets cost $36. At this rate, what is the cost per ticket?',  # overarching statement
        'point': 4,
        'question_type': 'short_answer',
        'assignment_type': 'assessment',
        'image_url_in_statement': None,
        'image_in_statement_alt': None, 
        'solution': '$12.00',
        'answer': '12',
        'teacher_notes': '''The numbers in this problem are messy enough that most students will need to calculate the unit price first, then multiply the unit price by the number of items. Look out for responses that involve calculating the unit price but do not go further.''',
        'skills_tested': [
            SkillsTested(
                category='Ratios and Proportional Relationships',
                sub_category='Understand Ratio Concepts And Use Ratio Reasoning To Solve Problems.',
                description='Understand the concept of a unit rate a/b associated with a ratio a:b with b â  0, and use rate language in the context of a ratio relationship. For example, "This recipe has a ratio of 3 cups of flour to 4 cups of sugar, so there is 3/4 cup of flour for each cup of sugar." "We paid $75 for 15 hamburgers, which is a rate of $5 per hamburger."'),
            SkillsTested(
                category='Ratios and Proportional Relationships',
                sub_category='Understand Ratio Concepts And Use Ratio Reasoning To Solve Problems.',
                description='Solve unit rate problems including those involving unit pricing and constant speed. For example, if it took 7 hours to mow 4 lawns, then at that rate, how many lawns could be mowed in 35 hours? At what rate were lawns being mowed?'
                ) ]
    }
    question_4_parta = Question(**question_4_parta_data)
    st.markdown(f"{question_4_parta.other_notes}. ([link to original question]({question_4_parta.url}))")
    st.write(f"{question_4_parta.statement}")
    st.write(f"> teacher notes: {question_4_parta.teacher_notes}")
    answer_4_parta = st.text_input('answer', value=question_4_parta.answer)

    
    with st.expander('answers | score | analysis | feedback'):
        st.write('question 4 part a')
        col1, col2, col3, col4 = st.columns((1,1,2,1))
        with col1:
            st.write('*answer*', answer_4_parta)
        with col2:
            score = grade_short_answer(problem_statement=question_4_parta.statement, 
                                       teacher_notes=question_4_parta.teacher_notes, solution=question_4_parta.solution, answer=answer_4_parta, points=4)
            st.write('*score*', score)
        with col3:
            if score == question_4_parta.point:
                st.write('*analysis*\n', FULL_SCORE_FEEDBACK)
                # st.audio(render_audio(full_score_fd))
            else:
                analysis = analyze_student_response(problem_statement=question_4_parta.statement,
                                                solution=question_4_parta.solution,
                                                answer=answer_4_parta, 
                                                image_url=question_4_parta.image_url_in_statement,
                                                teacher_notes=question_4_parta.teacher_notes,
                                                skills_tested=question_4_parta.skills_tested_str)
                st.write('*analysis*')
                st.write(fix_dollar_signs(analysis))
                st.write('---')
                analysis_red = analyze_student_response(problem_statement=question_4_parta.statement,
                                                solution=question_4_parta.solution,
                                                answer=answer_4_parta, 
                                                image_url=question_4_parta.image_url_in_statement,
                                                teacher_notes=None,
                                                skills_tested=None)
                st.write('*analysis without teacher notes nor skills tested*')
                st.write(fix_dollar_signs(analysis_red))
                
        with col4:
            if score != 4:
                st.write("feedback\n")
                fd_a = summarize_analysis(analysis, question_4_parta.solution, question_4_parta.skills_tested_str, question_4_parta.teacher_notes)
                st.write(fd_a)
                st.write("---")
                st.write("*feedback without teacher notes nor skills tested*")
                fd_a_red = summarize_analysis(analysis_red, question_4_parta.solution, None, None)
                st.write(fd_a_red)



    st.write("""---""")
    question_4_partc_data = {
        'url': 'https://app.kiddom.co/curriculum/668915/node/0ea5255a-6e31-42f7-951b-bac095a4679e:64f36058-5e4a-11ee-ac67-066a39b724af:ab40ef47-574f-11ee-9e8a-06dd2b7bf731',
        'other_notes': '**OUR-G6-U2-EUA Problem 5 PART A** Chosen b/c its an assessment short answer question',
        'statement': 'Solve each of the following: 3 bananas cost $0.99. At this rate, how much do 5 bananas cost?',  # overarching statement
        'point': 4,
        'question_type': 'short_answer',
        'assignment_type': 'assessment',
        'image_url_in_statement': None,
        'image_in_statement_alt': None, 
        'solution': '$5.50',
        'answer': '$.33',
        'teacher_notes': '''The numbers in this problem are messy enough that most students will need to calculate the unit price first, then multiply the unit price by the number of items. Look out for responses that involve calculating the unit price but do not go further.''',
        'skills_tested': [
            SkillsTested(
                category='Ratios and Proportional Relationships',
                sub_category='Understand Ratio Concepts And Use Ratio Reasoning To Solve Problems.',
                description='Understand the concept of a unit rate a/b associated with a ratio a:b with b â  0, and use rate language in the context of a ratio relationship. For example, "This recipe has a ratio of 3 cups of flour to 4 cups of sugar, so there is 3/4 cup of flour for each cup of sugar." "We paid $75 for 15 hamburgers, which is a rate of $5 per hamburger."'),
            SkillsTested(
                category='Ratios and Proportional Relationships',
                sub_category='Understand Ratio Concepts And Use Ratio Reasoning To Solve Problems.',
                description='Solve unit rate problems including those involving unit pricing and constant speed. For example, if it took 7 hours to mow 4 lawns, then at that rate, how many lawns could be mowed in 35 hours? At what rate were lawns being mowed?'
                ) ]
    }
    question_4_partc = Question(**question_4_partc_data)
    st.markdown(f"{question_4_partc.other_notes}. ([link to original question]({question_4_partc.url}))")
    st.write(f"{question_4_partc.statement}")
    st.write(f"> teacher notes: {question_4_partc.teacher_notes}")
    answer_4_partc = st.text_input('answer', value=question_4_partc.answer)

    
    with st.expander('answers | score | analysis | feedback'):
        st.write('question 4 part c')
        col1, col2, col3, col4 = st.columns((1,1,2,1))
        with col1:
            st.write('*answer*', answer_4_partc)
        with col2:
            score = grade_short_answer(problem_statement=question_4_partc.statement, 
                                       teacher_notes=question_4_partc.teacher_notes, solution=question_4_partc.solution, answer=answer_4_partc, points=4)
            st.write('*score*', score)
        with col3:
            if score == question_4_partc.point:
                st.write('*analysis*\n', FULL_SCORE_FEEDBACK)
                # st.audio(render_audio(full_score_fd))
            else:
                analysis = analyze_student_response(problem_statement=question_4_partc.statement,
                                                solution=question_4_partc.solution,
                                                answer=answer_4_partc, 
                                                image_url=question_4_partc.image_url_in_statement,
                                                teacher_notes=question_4_partc.teacher_notes,
                                                skills_tested=question_4_partc.skills_tested_str)
                st.write('*analysis*')
                
                # print(analysis)
                st.write(fix_dollar_signs(analysis))
                st.write('---')
                analysis_red = analyze_student_response(problem_statement=question_4_partc.statement,
                                                solution=question_4_partc.solution,
                                                answer=answer_4_partc, 
                                                image_url=question_4_partc.image_url_in_statement,
                                                teacher_notes=None,
                                                skills_tested=None)
                st.write('*analysis without teacher notes nor skills tested*')
                st.write(fix_dollar_signs(analysis_red))
                
        with col4:
            if score != 4:
                st.write("feedback\n")
                fd_a = summarize_analysis(analysis, question_4_partc.solution, question_4_partc.skills_tested_str, question_4_partc.teacher_notes)
                st.write(fd_a)
                st.write("---")
                st.write("*feedback without teacher notes nor skills tested*")
                fd_a_red = summarize_analysis(analysis_red, question_4_partc.solution, None, None)
                st.write(fd_a_red)

    st.write("""---""")
    question_3_partd_data = {
        'url': 'https://app.kiddom.co/curriculum/668915/node/0ea5255a-6e31-42f7-951b-bac095a4679e:64f36058-5e4a-11ee-ac67-066a39b724af:ab4086fd-574f-11ee-8f98-06dd2b7bf731',
        'other_notes': '**OUR-G6-U2-PreUnit Diagnostic Assessment Problem 3 Part D** Chosen b/c its an assessment multiple-part written ( short ) response question with both teacher notes & note for evaluating responses; this multipart question depends on the previous part(s)',
        'statement': '''Prompt for the Multipart Question
                Create a double number line or a table that shows different amounts of powder and water that taste the same as Noahâs mixture.
                Part A: 28 is 7 times what number?
                Part B: 8 is 32 times what number?
                Part C: 4,000 is times what number?
                **Part D: Choose one part and explain how you know your answer is correct.**
                ''', 
        'point': 4,
        'question_type': 'short_response',
        'assignment_type': 'assessment',
        'image_url_in_statement': None,
        'image_in_statement_alt': None, 
        'solution': {
                'Part A': '28 is 7 times what number? Answer: 4',
                'Part B': '8 is 32 times what number? Answer: 4',
                'Part C': '4,000 is times what number? Answer: 1000'
        },
        'answer': """part c i know 1x4 is 4 so the so you do the 4x1=4 then add the 0s so you get 4000""",
        'teacher_notes': '''
            In their work with ratio and proportion, students will often need to consider questions of the form, âB is A times what number?â 
            The second part of this question involves reasoning with fractions; the third part requires reasoning with place value.
            NOTE FOR EVALUATING RESPONSES: Explanations vary. 
            ''',
        'skills_tested': [SkillsTested(
            category='Operations and Algebraic Thinking',
            sub_category='Use The Four Operations With Whole Numbers To Solve Problems.',
            description='Interpret a multiplication equation as a comparison, e.g., interpret 35 = 5 Ã 7 as a statement that 35 is 5 times as many as 7 and 7 times as many as 5. Represent verbal statements of multiplicative comparisons as multiplication equations.'
        ),
        SkillsTested(
            category='Number and Operations in Base Ten',
            sub_category='Generalize Place Value Understanding For Multi-Digit Whole Numbers.',
            description='Recognize that in a multi-digit whole number, a digit in one place represents ten times what it represents in the place to its right. For example, recognize that 700 Ã· 70 = 10 by applying concepts of place value and division.'
        ),
        SkillsTested(
            category='Number and Operations in Base Ten',
            sub_category='Build Fractions From Unit Fractions By Applying And Extending Previous Understandings Of Operations On Whole Numbers.',
            description='Understand a multiple of a/b as a multiple of 1/b, and use this understanding to multiply a fraction by a whole number. For example, use a visual fraction model to express 3 Ã (2/5) as 6 Ã (1/5), recognizing this product as 6/5. (In general, n Ã (a/b) = (n Ã a)/b.)'
        )]
    }
    # '''
    # select child_luser_id, response, node_id, description, q.score
    # from kiddom_teacherdashboard.production.attempt
    # join kiddom_teacherdashboard.production.attempt_question q on attempt.id = q.attempt_id
    # join raw.curriculum.cassandra_tree_node n on q.node_id = n.id
    # where 1=1 -- assignment_id = 1870697
    # -- and child_luser_id = 212856752
    # -- and node_id = 'ab40880a-574f-11ee-8fbe-06dd2b7bf731'
    # and child_luser_id = 212829351
    # -- and q.score = 2;
    # ;   
    # '''
    question_3_partd = Question(**question_3_partd_data)
    st.markdown(f"{question_3_partd.other_notes}. ([link to original question]({question_3_partd.url}))")
    st.markdown(f"{question_3_partd.statement}")
    st.markdown(f"> teacher notes: {question_3_partd.teacher_notes}")
    answer_3_partd = st.text_area('answer', value=question_3_partd.answer, height=150)

    with st.expander('answers | score | analysis | feedback'):
        st.write('question 3 part d')
        col1, col2, col3, col4 = st.columns((1,1,2,1))
        with col1:
            st.write('*answer*', answer_3_partd)
        with col2:
            score = grade_short_answer(problem_statement=question_3_partd.statement, 
                                       teacher_notes=question_3_partd.teacher_notes, solution=question_3_partd.solution, answer=answer_3_partd, points=4)
            st.write('*score*', score)
        with col3:
            if score == question_3_partd.point:
                st.write('*analysis*\n', FULL_SCORE_FEEDBACK)
                # st.audio(render_audio(full_score_fd))
            else:
                analysis = analyze_student_response(problem_statement=question_3_partd.statement,
                                                solution=question_3_partd.solution,
                                                answer=answer_3_partd, 
                                                image_url=question_3_partd.image_url_in_statement,
                                                teacher_notes=question_3_partd.teacher_notes,
                                                skills_tested=question_3_partd.skills_tested_str)
                st.write('*analysis*')
                st.write(analysis)
                st.write('---')
                analysis_red = analyze_student_response(problem_statement=question_3_partd.statement,
                                                solution=question_3_partd.solution,
                                                answer=answer_3_partd, 
                                                image_url=question_3_partd.image_url_in_statement,
                                                teacher_notes=None,
                                                skills_tested=None)
                st.write('*analysis without teacher notes nor skills tested*')
                st.write(analysis_red)
        with col4:
            if score != 4:
                st.write("feedback\n")
                fd_a = summarize_analysis(analysis, question_3_partd.solution, question_3_partd.skills_tested_str, question_3_partd.teacher_notes)
                st.write(fd_a)
                st.write("---")
                st.write("*feedback without teacher notes nor skills tested*")
                fd_a_red = summarize_analysis(analysis_red, question_3_partd.solution, None, None)
                st.write(fd_a_red)
        
        st.write("""takeaways for the above questions: for this one, the nature of the question is asking for an explanation of the previous part answer. 
                 then we feed the answer to part a, b, and c then the answer to part d. programmatic solution may NOT be straightforward.
                 by the way, in query we can see that the teacher's grade is also 2.
                 """)